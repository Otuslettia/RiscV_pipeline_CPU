$date
    Dec 21, 2023  17:07:07
$end
$version
    TOOL:	xmsim(64)	22.03-s003
$end
$timescale
    1 ns
$end

$scope module tb_Top $end
$var reg       1 !    clk $end
$var reg       1 "    rst $end
$var wire      1 #    halt  $end
$var wire      1 $    print_flag  $end
$var parameter 32 %    CLK_PERIOD $end
$var integer  32 &    i $end

$scope module top $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire      1 #    halt  $end
$var wire      1 $    print_flag  $end
$var wire      5 )    opcode [4:0] $end
$var wire      3 *    func3 [2:0] $end
$var wire      1 +    func7  $end
$var wire     32 ,    alu_src1 [31:0] $end
$var wire     32 -    alu_src2 [31:0] $end
$var wire      1 .    alu_out [31] $end
$var wire      1 /    alu_out [30] $end
$var wire      1 0    alu_out [29] $end
$var wire      1 1    alu_out [28] $end
$var wire      1 2    alu_out [27] $end
$var wire      1 3    alu_out [26] $end
$var wire      1 4    alu_out [25] $end
$var wire      1 5    alu_out [24] $end
$var wire      1 6    alu_out [23] $end
$var wire      1 7    alu_out [22] $end
$var wire      1 8    alu_out [21] $end
$var wire      1 9    alu_out [20] $end
$var wire      1 :    alu_out [19] $end
$var wire      1 ;    alu_out [18] $end
$var wire      1 <    alu_out [17] $end
$var wire      1 =    alu_out [16] $end
$var wire      1 >    alu_out [15] $end
$var wire      1 ?    alu_out [14] $end
$var wire      1 @    alu_out [13] $end
$var wire      1 A    alu_out [12] $end
$var wire      1 B    alu_out [11] $end
$var wire      1 C    alu_out [10] $end
$var wire      1 D    alu_out [9] $end
$var wire      1 E    alu_out [8] $end
$var wire      1 F    alu_out [7] $end
$var wire      1 G    alu_out [6] $end
$var wire      1 H    alu_out [5] $end
$var wire      1 I    alu_out [4] $end
$var wire      1 J    alu_out [3] $end
$var wire      1 K    alu_out [2] $end
$var wire      1 L    alu_out [1] $end
$var wire      1 M    alu_out [0] $end
$var wire     32 N    imm_ext_out [31:0] $end
$var wire     32 O    inst [31:0] $end
$var wire     32 P    inst_reg [31:0] $end
$var wire      5 Q    rs1_index [4:0] $end
$var wire      5 R    rs2_index [4:0] $end
$var wire      5 S    rd_index [4:0] $end
$var wire     32 T    JB_src1 [31:0] $end
$var wire     32 U    JB_out [31:0] $end
$var wire     32 V    ld_data_f [31:0] $end
$var wire     32 W    current_pc [31:0] $end
$var wire     32 X    next_pc [31:0] $end
$var wire      4 Y    im_w_en [3:0] $end
$var wire      4 Z    dm_w_en [3:0] $end
$var wire      1 [    wb_en  $end
$var wire     32 \    dm_out [31:0] $end
$var wire     32 ]    rs1_data_out [31:0] $end
$var wire     32 ^    rs2_data_out [31:0] $end
$var wire     32 _    wb_data [31:0] $end
$var wire      1 `    next_pc_sel  $end
$var wire      1 a    jb_src1_sel  $end
$var wire      1 b    alu_src1_sel  $end
$var wire      1 c    alu_src2_sel  $end
$var wire      1 d    wb_sel  $end
$var wire      1 e    ecall_sig  $end
$var wire      1 f    pc_stall  $end
$var wire      1 g    f_d_stall  $end
$var wire      1 h    f_d_flush  $end
$var wire      1 i    d_e_flush  $end
$var wire      1 j    e_m_flush  $end
$var wire      2 k    rs1_forward_sel [1:0] $end
$var wire      2 l    rs2_forward_sel [1:0] $end
$var wire     32 m    rs1_data_f [31:0] $end
$var wire     32 n    rs2_data_f [31:0] $end
$var wire      1 o    is_branch  $end
$var wire      1 p    is_jalr  $end
$var wire      1 q    hit_e_m  $end
$var wire     32 r    branch_taken_choice_out [31:0] $end
$var wire      2 s    inst_type [1:0] $end
$var wire      1 t    current_guess  $end
$var wire     32 u    rs1_data_reg_d_e [31:0] $end
$var wire      5 v    rs1_index_reg_d_e [4:0] $end
$var wire      5 w    rs2_index_reg_d_e [4:0] $end
$var wire     32 x    imm_out_reg_d_e [31:0] $end
$var wire      1 y    alu_src1_sel_reg_d_e  $end
$var wire      1 z    alu_src2_sel_reg_d_e  $end
$var wire      1 {    jb_src1_sel_reg_d_e  $end
$var wire      5 |    opcode_reg_d_e [4:0] $end
$var wire      1 }    func7_reg_d_e  $end
$var wire     32 ~    jb_addr_reg_e_m [31:0] $end
$var wire      1 !!   branch_taken_reg_e_m  $end
$var wire      1 "!   is_jalr_reg_e_m  $end
$var wire      1 #!   is_branch_reg_e_m  $end
$var wire      2 $!   inst_type_reg_e_m [1:0] $end
$var wire     32 %!   dm_out_reg_m_w [31:0] $end
$var wire     32 &!   pc_reg_f_d [31:0] $end
$var wire     32 '!   pc_reg_d_e [31:0] $end
$var wire      1 `    pc_reg_e_m [31] $end
$var wire      1 `    pc_reg_e_m [30] $end
$var wire      1 `    pc_reg_e_m [29] $end
$var wire      1 `    pc_reg_e_m [28] $end
$var wire      1 `    pc_reg_e_m [27] $end
$var wire      1 `    pc_reg_e_m [26] $end
$var wire      1 `    pc_reg_e_m [25] $end
$var wire      1 `    pc_reg_e_m [24] $end
$var wire      1 `    pc_reg_e_m [23] $end
$var wire      1 `    pc_reg_e_m [22] $end
$var wire      1 `    pc_reg_e_m [21] $end
$var wire      1 `    pc_reg_e_m [20] $end
$var wire      1 `    pc_reg_e_m [19] $end
$var wire      1 `    pc_reg_e_m [18] $end
$var wire      1 `    pc_reg_e_m [17] $end
$var wire      1 `    pc_reg_e_m [16] $end
$var wire      1 `    pc_reg_e_m [15] $end
$var wire      1 `    pc_reg_e_m [14] $end
$var wire      1 `    pc_reg_e_m [13] $end
$var wire      1 `    pc_reg_e_m [12] $end
$var wire      1 `    pc_reg_e_m [11] $end
$var wire      1 `    pc_reg_e_m [10] $end
$var wire      1 `    pc_reg_e_m [9] $end
$var wire      1 `    pc_reg_e_m [8] $end
$var wire      1 `    pc_reg_e_m [7] $end
$var wire      1 `    pc_reg_e_m [6] $end
$var wire      1 `    pc_reg_e_m [5] $end
$var wire      1 `    pc_reg_e_m [4] $end
$var wire      1 `    pc_reg_e_m [3] $end
$var wire      1 `    pc_reg_e_m [2] $end
$var wire      1 `    pc_reg_e_m [1] $end
$var wire      1 (!   pc_reg_e_m [0] $end
$var wire      5 )!   rd_index_reg_d_e [4:0] $end
$var wire      5 *!   rd_index_reg_e_m [4:0] $end
$var wire      5 +!   rd_index_reg_m_w [4:0] $end
$var wire      1 ,!   ecall_sig_reg_d_e  $end
$var wire      1 -!   ecall_sig_reg_e_m  $end
$var wire      1 .!   ecall_sig_reg_m_w  $end
$var wire     32 /!   rs2_data_reg_d_e [31:0] $end
$var wire     32 0!   rs2_data_reg_e_m [31:0] $end
$var wire     32 1!   alu_out_reg_e_m [31:0] $end
$var wire     32 2!   alu_out_reg_m_w [31:0] $end
$var wire      3 3!   func3_reg_d_e [2:0] $end
$var wire      3 4!   func3_reg_e_m [2:0] $end
$var wire      3 5!   func3_reg_m_w [2:0] $end
$var wire      4 6!   dm_w_en_reg_d_e [3:0] $end
$var wire      4 7!   dm_w_en_reg_e_m [3:0] $end
$var wire      1 8!   wb_sel_reg_d_e  $end
$var wire      1 9!   wb_sel_reg_e_m  $end
$var wire      1 :!   wb_sel_reg_m_w  $end
$var wire      1 ;!   wb_en_reg_d_e  $end
$var wire      1 <!   wb_en_reg_e_m  $end
$var wire      1 =!   wb_en_reg_m_w  $end
$var wire      1 >!   guess_reg_f_d  $end
$var wire      1 ?!   guess_reg_d_e  $end
$var wire      1 @!   guess_reg_e_m  $end
$var wire      1 A!   branch_taken  $end

$scope module n_pcu $end
$var wire     32 O    inst [31:0] $end
$var wire     32 W    current_pc [31:0] $end
$var wire      1 `    em_pc [31] $end
$var wire      1 `    em_pc [30] $end
$var wire      1 `    em_pc [29] $end
$var wire      1 `    em_pc [28] $end
$var wire      1 `    em_pc [27] $end
$var wire      1 `    em_pc [26] $end
$var wire      1 `    em_pc [25] $end
$var wire      1 `    em_pc [24] $end
$var wire      1 `    em_pc [23] $end
$var wire      1 `    em_pc [22] $end
$var wire      1 `    em_pc [21] $end
$var wire      1 `    em_pc [20] $end
$var wire      1 `    em_pc [19] $end
$var wire      1 `    em_pc [18] $end
$var wire      1 `    em_pc [17] $end
$var wire      1 `    em_pc [16] $end
$var wire      1 `    em_pc [15] $end
$var wire      1 `    em_pc [14] $end
$var wire      1 `    em_pc [13] $end
$var wire      1 `    em_pc [12] $end
$var wire      1 `    em_pc [11] $end
$var wire      1 `    em_pc [10] $end
$var wire      1 `    em_pc [9] $end
$var wire      1 `    em_pc [8] $end
$var wire      1 `    em_pc [7] $end
$var wire      1 `    em_pc [6] $end
$var wire      1 `    em_pc [5] $end
$var wire      1 `    em_pc [4] $end
$var wire      1 `    em_pc [3] $end
$var wire      1 `    em_pc [2] $end
$var wire      1 `    em_pc [1] $end
$var wire      1 (!   em_pc [0] $end
$var wire     32 ~    em_baddr [31:0] $end
$var wire      1 t    c_guess  $end
$var wire      1 @!   em_guess  $end
$var wire      1 q    hit  $end
$var wire      2 $!   em_type [1:0] $end
$var reg      32 B!   nextpc [31:0] $end
$var reg      32 C!   imm_ext_bp_out [31:0] $end
$var parameter  1 D!   jump $end
$var wire     32 E!   current_baddr [31:0] $end
$var wire     32 F!   current_pc4 [31:0] $end
$var wire     32 G!   current_out [31:0] $end
$var wire     32 H!   hit_mux_out [31:0] $end
$var wire     32 I!   em_pc4 [31:0] $end
$var wire     32 J!   em_guess_out [31:0] $end
$var parameter  2 K!   jalr $end
$var parameter  2 L!   hit_mux $end
$var parameter  2 M!   other_ins $end

$scope module hit_mux_unit $end
$var wire     32 G!   true_choice [31:0] $end
$var wire     32 J!   false_choice [31:0] $end
$var wire      1 q    sel  $end
$var wire     32 H!   result [31:0] $end
$upscope $end

$upscope $end


$scope module hit_u $end
$var wire      1 #!   is_branch  $end
$var wire      1 !!   branch_taken  $end
$var wire      1 @!   guess  $end
$var reg       1 N!   hit $end
$upscope $end


$scope module b_p $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire      1 #!   is_branch  $end
$var wire      1 !!   Branch_taken  $end
$var reg       1 O!   Guess_result $end
$var reg       2 P!   state [1:0] $end
$var reg       2 Q!   nextstate [1:0] $end
$var parameter  2 R!   noB0 $end
$var parameter  2 S!   noB1 $end
$var parameter  2 T!   goB0 $end
$var parameter  2 U!   goB1 $end
$var parameter  1 V!   nottaken $end
$var parameter  1 W!   taken $end
$upscope $end


$scope module PC $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire      1 f    stall  $end
$var wire     32 X    next_pc [31:0] $end
$var reg      32 X!   current_pc [31:0] $end
$upscope $end


$scope module im $end
$var wire      1 '    clk  $end
$var wire      4 Y!   w_en [3:0] $end
$var wire     16 Z!   address [15:0] $end
$var wire     32 [!   write_data [31:0] $end
$var wire     32 O    read_data [31:0] $end

$scope begin gen_regs[0] $end
$var parameter 32 \!   I $end
$var wire     32 ]!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[1] $end
$var parameter 32 ^!   I $end
$var wire     32 _!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[2] $end
$var parameter 32 `!   I $end
$var wire     32 a!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[3] $end
$var parameter 32 b!   I $end
$var wire     32 c!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[4] $end
$var parameter 32 d!   I $end
$var wire     32 e!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[5] $end
$var parameter 32 f!   I $end
$var wire     32 g!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[6] $end
$var parameter 32 h!   I $end
$var wire     32 i!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[7] $end
$var parameter 32 j!   I $end
$var wire     32 k!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[8] $end
$var parameter 32 l!   I $end
$var wire     32 m!   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[9] $end
$var parameter 32 n!   I $end
$var wire     32 o!   mem_temp [31:0] $end
$upscope $end

$upscope $end


$scope module f_d_reg $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire      1 g    stall  $end
$var wire      1 h    flush  $end
$var wire     32 O    inst [31:0] $end
$var wire     32 W    pc [31:0] $end
$var wire      1 t    guess  $end
$var reg      32 p!   inst_reg [31:0] $end
$var reg      32 q!   pc_reg [31:0] $end
$var reg       1 r!   guess_reg $end
$upscope $end


$scope module decoder $end
$var wire     32 P    inst [31:0] $end
$var wire      5 )    dc_out_opcode [4:0] $end
$var wire      3 *    dc_out_func3 [2:0] $end
$var wire      1 +    dc_out_func7  $end
$var wire      5 Q    dc_out_rs1_index [4:0] $end
$var wire      5 R    dc_out_rs2_index [4:0] $end
$var wire      5 S    dc_out_rd_index [4:0] $end
$upscope $end


$scope module regfile $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire      1 =!   wb_en  $end
$var wire      1 .!   ecall_sig  $end
$var wire     32 _    wb_data [31:0] $end
$var wire      5 +!   rd_index [4:0] $end
$var wire      5 Q    rs1_index [4:0] $end
$var wire      5 R    rs2_index [4:0] $end
$var wire     32 ]    rs1_data_out [31:0] $end
$var wire     32 ^    rs2_data_out [31:0] $end
$var reg       1 s!   halt $end
$var reg       1 t!   print_flag $end
$var reg      32 u!   regFile[0] [31:0] $end
$var reg      32 v!   regFile[1] [31:0] $end
$var reg      32 w!   regFile[2] [31:0] $end
$var reg      32 x!   regFile[3] [31:0] $end
$var reg      32 y!   regFile[4] [31:0] $end
$var reg      32 z!   regFile[5] [31:0] $end
$var reg      32 {!   regFile[6] [31:0] $end
$var reg      32 |!   regFile[7] [31:0] $end
$var reg      32 }!   regFile[8] [31:0] $end
$var reg      32 ~!   regFile[9] [31:0] $end
$var reg      32 !"   regFile[10] [31:0] $end
$var reg      32 ""   regFile[11] [31:0] $end
$var reg      32 #"   regFile[12] [31:0] $end
$var reg      32 $"   regFile[13] [31:0] $end
$var reg      32 %"   regFile[14] [31:0] $end
$var reg      32 &"   regFile[15] [31:0] $end
$var reg      32 '"   regFile[16] [31:0] $end
$var reg      32 ("   regFile[17] [31:0] $end
$var reg      32 )"   regFile[18] [31:0] $end
$var reg      32 *"   regFile[19] [31:0] $end
$var reg      32 +"   regFile[20] [31:0] $end
$var reg      32 ,"   regFile[21] [31:0] $end
$var reg      32 -"   regFile[22] [31:0] $end
$var reg      32 ."   regFile[23] [31:0] $end
$var reg      32 /"   regFile[24] [31:0] $end
$var reg      32 0"   regFile[25] [31:0] $end
$var reg      32 1"   regFile[26] [31:0] $end
$var reg      32 2"   regFile[27] [31:0] $end
$var reg      32 3"   regFile[28] [31:0] $end
$var reg      32 4"   regFile[29] [31:0] $end
$var reg      32 5"   regFile[30] [31:0] $end
$var reg      32 6"   regFile[31] [31:0] $end
$var wire      1 7"   print_en  $end
$var wire      1 8"   stop_flag  $end
$var integer  32 9"   i $end

$scope begin gen_regs[0] $end
$var parameter 32 :"   I $end
$var wire     32 ;"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[1] $end
$var parameter 32 <"   I $end
$var wire     32 ="   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[2] $end
$var parameter 32 >"   I $end
$var wire     32 ?"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[3] $end
$var parameter 32 @"   I $end
$var wire     32 A"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[4] $end
$var parameter 32 B"   I $end
$var wire     32 C"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[5] $end
$var parameter 32 D"   I $end
$var wire     32 E"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[6] $end
$var parameter 32 F"   I $end
$var wire     32 G"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[7] $end
$var parameter 32 H"   I $end
$var wire     32 I"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[8] $end
$var parameter 32 J"   I $end
$var wire     32 K"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[9] $end
$var parameter 32 L"   I $end
$var wire     32 M"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[10] $end
$var parameter 32 N"   I $end
$var wire     32 O"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[11] $end
$var parameter 32 P"   I $end
$var wire     32 Q"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[12] $end
$var parameter 32 R"   I $end
$var wire     32 S"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[13] $end
$var parameter 32 T"   I $end
$var wire     32 U"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[14] $end
$var parameter 32 V"   I $end
$var wire     32 W"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[15] $end
$var parameter 32 X"   I $end
$var wire     32 Y"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[16] $end
$var parameter 32 Z"   I $end
$var wire     32 ["   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[17] $end
$var parameter 32 \"   I $end
$var wire     32 ]"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[18] $end
$var parameter 32 ^"   I $end
$var wire     32 _"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[19] $end
$var parameter 32 `"   I $end
$var wire     32 a"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[20] $end
$var parameter 32 b"   I $end
$var wire     32 c"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[21] $end
$var parameter 32 d"   I $end
$var wire     32 e"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[22] $end
$var parameter 32 f"   I $end
$var wire     32 g"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[23] $end
$var parameter 32 h"   I $end
$var wire     32 i"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[24] $end
$var parameter 32 j"   I $end
$var wire     32 k"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[25] $end
$var parameter 32 l"   I $end
$var wire     32 m"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[26] $end
$var parameter 32 n"   I $end
$var wire     32 o"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[27] $end
$var parameter 32 p"   I $end
$var wire     32 q"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[28] $end
$var parameter 32 r"   I $end
$var wire     32 s"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[29] $end
$var parameter 32 t"   I $end
$var wire     32 u"   reg_temp [31:0] $end
$upscope $end


$scope begin gen_regs[30] $end
$var parameter 32 v"   I $end
$var wire     32 w"   reg_temp [31:0] $end
$upscope $end

$upscope $end


$scope module imm_ext $end
$var wire     32 P    inst [31:0] $end
$var reg      32 x"   imm_ext_out [31:0] $end
$upscope $end


$scope module contr $end
$var wire      5 )    opcode [4:0] $end
$var wire      3 *    func3 [2:0] $end
$var wire      1 +    func7  $end
$var wire      4 Y    im_w_en [3:0] $end
$var reg       4 y"   dm_w_en [3:0] $end
$var reg       1 z"   wb_en $end
$var wire      1 a    jb_src1_sel  $end
$var reg       1 {"   alu_src1_sel $end
$var reg       1 |"   alu_src2_sel $end
$var wire      1 d    wb_sel  $end
$var wire      1 e    ecall_sig  $end
$upscope $end


$scope module d_e_reg $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire      1 i    flush  $end
$var wire      5 Q    rs1_index [4:0] $end
$var wire      5 R    rs2_index [4:0] $end
$var wire      5 S    rd_index [4:0] $end
$var wire     32 ]    rs1_data [31:0] $end
$var wire     32 ^    rs2_data [31:0] $end
$var wire     32 N    imm_out [31:0] $end
$var wire     32 &!   pc [31:0] $end
$var wire      1 >!   guess  $end
$var wire      1 b    alu_src1_sel  $end
$var wire      1 c    alu_src2_sel  $end
$var wire      1 a    jb_src1_sel  $end
$var wire      5 )    opcode [4:0] $end
$var wire      3 *    func3 [2:0] $end
$var wire      1 +    func7  $end
$var wire      4 Z    dm_w_en [3:0] $end
$var wire      1 e    ecall_sig  $end
$var wire      1 d    wb_sel  $end
$var wire      1 [    wb_en  $end
$var reg       5 }"   rs1_index_reg [4:0] $end
$var reg       5 ~"   rs2_index_reg [4:0] $end
$var reg       5 !#   rd_index_reg [4:0] $end
$var reg      32 "#   rs1_data_reg [31:0] $end
$var reg      32 ##   rs2_data_reg [31:0] $end
$var reg      32 $#   imm_out_reg [31:0] $end
$var reg      32 %#   pc_reg [31:0] $end
$var reg       1 &#   guess_reg $end
$var reg       1 '#   alu_src1_sel_reg $end
$var reg       1 (#   alu_src2_sel_reg $end
$var reg       1 )#   jb_src1_sel_reg $end
$var reg       5 *#   opcode_reg [4:0] $end
$var reg       3 +#   func3_reg [2:0] $end
$var reg       1 ,#   func7_reg $end
$var reg       4 -#   dm_w_en_reg [3:0] $end
$var reg       1 .#   ecall_sig_reg $end
$var reg       1 /#   wb_sel_reg $end
$var reg       1 0#   wb_en_reg $end
$upscope $end


$scope module rs1_f $end
$var wire     32 u    in0 [31:0] $end
$var wire     32 1!   in1 [31:0] $end
$var wire     32 _    in2 [31:0] $end
$var wire     32 u    in3 [31:0] $end
$var wire      2 k    sel [1:0] $end
$var reg      32 1#   result [31:0] $end
$upscope $end


$scope module m2 $end
$var wire     32 '!   true_choice [31:0] $end
$var wire     32 m    false_choice [31:0] $end
$var wire      1 y    sel  $end
$var wire     32 ,    result [31:0] $end
$upscope $end


$scope module rs2_f $end
$var wire     32 /!   in0 [31:0] $end
$var wire     32 1!   in1 [31:0] $end
$var wire     32 _    in2 [31:0] $end
$var wire     32 /!   in3 [31:0] $end
$var wire      2 l    sel [1:0] $end
$var reg      32 2#   result [31:0] $end
$upscope $end


$scope module m3 $end
$var wire     32 n    true_choice [31:0] $end
$var wire     32 x    false_choice [31:0] $end
$var wire      1 z    sel  $end
$var wire     32 -    result [31:0] $end
$upscope $end


$scope module alu $end
$var wire      5 |    opcode [4:0] $end
$var wire      3 3!   func3 [2:0] $end
$var wire      1 }    func7  $end
$var wire     32 ,    alu_src1 [31:0] $end
$var wire     32 -    alu_src2 [31:0] $end
$var reg      32 3#   alu_out [31:0] $end
$upscope $end


$scope module btu $end
$var wire      5 |    opcode [4:0] $end
$var wire      1 M    alu_out0  $end
$var reg       1 4#   branch_taken $end
$var wire      1 o    is_branch  $end
$var wire      2 s    inst_type [1:0] $end
$var wire      1 p    is_jalr  $end
$upscope $end


$scope module m4 $end
$var wire     32 m    true_choice [31:0] $end
$var wire     32 '!   false_choice [31:0] $end
$var wire      1 {    sel  $end
$var wire     32 T    result [31:0] $end
$upscope $end


$scope module jb_unit $end
$var wire      5 |    opcode [4:0] $end
$var wire     32 T    JB_src1 [31:0] $end
$var wire     32 x    JB_src2 [31:0] $end
$var reg      32 5#   JB_out [31:0] $end
$upscope $end


$scope module e_m_reg $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire      1 j    flush  $end
$var wire      1 .    alu_out [31] $end
$var wire      1 /    alu_out [30] $end
$var wire      1 0    alu_out [29] $end
$var wire      1 1    alu_out [28] $end
$var wire      1 2    alu_out [27] $end
$var wire      1 3    alu_out [26] $end
$var wire      1 4    alu_out [25] $end
$var wire      1 5    alu_out [24] $end
$var wire      1 6    alu_out [23] $end
$var wire      1 7    alu_out [22] $end
$var wire      1 8    alu_out [21] $end
$var wire      1 9    alu_out [20] $end
$var wire      1 :    alu_out [19] $end
$var wire      1 ;    alu_out [18] $end
$var wire      1 <    alu_out [17] $end
$var wire      1 =    alu_out [16] $end
$var wire      1 >    alu_out [15] $end
$var wire      1 ?    alu_out [14] $end
$var wire      1 @    alu_out [13] $end
$var wire      1 A    alu_out [12] $end
$var wire      1 B    alu_out [11] $end
$var wire      1 C    alu_out [10] $end
$var wire      1 D    alu_out [9] $end
$var wire      1 E    alu_out [8] $end
$var wire      1 F    alu_out [7] $end
$var wire      1 G    alu_out [6] $end
$var wire      1 H    alu_out [5] $end
$var wire      1 I    alu_out [4] $end
$var wire      1 J    alu_out [3] $end
$var wire      1 K    alu_out [2] $end
$var wire      1 L    alu_out [1] $end
$var wire      1 M    alu_out [0] $end
$var wire     32 n    rs2_data [31:0] $end
$var wire      5 )!   rd_index [4:0] $end
$var wire     32 U    jb_addr [31:0] $end
$var wire      1 A!   branch_taken  $end
$var wire      1 o    is_branch  $end
$var wire      1 p    is_jalr  $end
$var wire      1 ?!   guess  $end
$var wire      2 s    inst_type [1:0] $end
$var wire      4 6!   dm_w_en [3:0] $end
$var wire      1 ,!   ecall_sig  $end
$var wire      1 8!   wb_sel  $end
$var wire      1 ;!   wb_en  $end
$var wire      3 3!   func3 [2:0] $end
$var wire     32 '!   pc [31:0] $end
$var reg      32 6#   alu_out_reg [31:0] $end
$var reg      32 7#   rs2_data_reg [31:0] $end
$var reg       5 8#   rd_index_reg [4:0] $end
$var reg      32 9#   jb_addr_reg [31:0] $end
$var reg       1 :#   branch_taken_reg $end
$var reg       1 ;#   is_branch_reg $end
$var reg       1 <#   is_jalr_reg $end
$var reg       1 =#   guess_reg $end
$var reg       2 >#   inst_type_reg [1:0] $end
$var reg       1 ?#   pc_reg $end
$var reg       4 @#   dm_w_en_reg [3:0] $end
$var reg       1 A#   ecall_sig_reg $end
$var reg       1 B#   wb_sel_reg $end
$var reg       1 C#   wb_en_reg $end
$var reg       3 D#   func3_reg [2:0] $end
$upscope $end


$scope module dm $end
$var wire      1 '    clk  $end
$var wire      4 7!   w_en [3:0] $end
$var wire     16 E#   address [15:0] $end
$var wire     32 0!   write_data [31:0] $end
$var wire     32 \    read_data [31:0] $end

$scope begin gen_regs[0] $end
$var parameter 32 F#   I $end
$var wire     32 G#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[1] $end
$var parameter 32 H#   I $end
$var wire     32 I#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[2] $end
$var parameter 32 J#   I $end
$var wire     32 K#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[3] $end
$var parameter 32 L#   I $end
$var wire     32 M#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[4] $end
$var parameter 32 N#   I $end
$var wire     32 O#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[5] $end
$var parameter 32 P#   I $end
$var wire     32 Q#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[6] $end
$var parameter 32 R#   I $end
$var wire     32 S#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[7] $end
$var parameter 32 T#   I $end
$var wire     32 U#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[8] $end
$var parameter 32 V#   I $end
$var wire     32 W#   mem_temp [31:0] $end
$upscope $end


$scope begin gen_regs[9] $end
$var parameter 32 X#   I $end
$var wire     32 Y#   mem_temp [31:0] $end
$upscope $end

$upscope $end


$scope module m_w_reg $end
$var wire      1 '    clk  $end
$var wire      1 (    rst  $end
$var wire     32 \    dm_out [31:0] $end
$var wire     32 1!   alu_out [31:0] $end
$var wire      5 *!   rd_index [4:0] $end
$var wire      1 -!   ecall_sig  $end
$var wire      1 9!   wb_sel  $end
$var wire      1 <!   wb_en  $end
$var wire      3 4!   func3 [2:0] $end
$var reg      32 Z#   dm_out_reg [31:0] $end
$var reg      32 [#   alu_out_reg [31:0] $end
$var reg       5 \#   rd_index_reg [4:0] $end
$var reg       1 ]#   ecall_sig_reg $end
$var reg       1 ^#   wb_sel_reg $end
$var reg       1 _#   wb_en_reg $end
$var reg       3 `#   func3_reg [2:0] $end
$upscope $end


$scope module ld_filter $end
$var wire      3 5!   func3 [2:0] $end
$var wire     32 %!   ld_data [31:0] $end
$var reg      32 a#   ld_data_f [31:0] $end
$upscope $end


$scope module m5 $end
$var wire     32 V    true_choice [31:0] $end
$var wire     32 2!   false_choice [31:0] $end
$var wire      1 :!   sel  $end
$var wire     32 _    result [31:0] $end
$upscope $end


$scope module HD $end
$var wire      5 Q    F_D_rs1_index [4:0] $end
$var wire      5 R    F_D_rs2_index [4:0] $end
$var wire      1 8!   D_E_wb_sel  $end
$var wire      5 )!   D_E_rd_index [4:0] $end
$var wire      1 "!   E_M_is_jalr  $end
$var wire      1 q    E_M_hit  $end
$var reg       1 b#   F_D_flush $end
$var reg       1 c#   D_E_flush $end
$var reg       1 d#   E_M_flush $end
$var reg       1 e#   PC_stall $end
$var reg       1 f#   F_D_stall $end
$var reg       1 g#   load_used_DH_flag $end
$upscope $end


$scope module FU $end
$var wire      1 <!   E_M_wb_en  $end
$var wire      1 =!   M_W_wb_en  $end
$var wire      5 v    D_E_rs1_index [4:0] $end
$var wire      5 w    D_E_rs2_index [4:0] $end
$var wire      5 *!   E_M_rd_index [4:0] $end
$var wire      5 +!   M_W_rd_index [4:0] $end
$var reg       2 h#   rs1_sel [1:0] $end
$var reg       2 i#   rs2_sel [1:0] $end
$var parameter  2 j#   not_forward $end
$var parameter  2 k#   forward_M $end
$var parameter  2 l#   forward_W $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b10 l#
b1 k#
b0 j#
b1001 X#
b1000 V#
b111 T#
b110 R#
b101 P#
b100 N#
b11 L#
b10 J#
b1 H#
b0 F#
b11110 v"
b11101 t"
b11100 r"
b11011 p"
b11010 n"
b11001 l"
b11000 j"
b10111 h"
b10110 f"
b10101 d"
b10100 b"
b10011 `"
b10010 ^"
b10001 \"
b10000 Z"
b1111 X"
b1110 V"
b1101 T"
b1100 R"
b1011 P"
b1010 N"
b1001 L"
b1000 J"
b111 H"
b110 F"
b101 D"
b100 B"
b11 @"
b10 >"
b1 <"
b0 :"
b1001 n!
b1000 l!
b111 j!
b110 h!
b101 f!
b100 d!
b11 b!
b10 `!
b1 ^!
b0 \!
1W!
0V!
b10 U!
b10 T!
b1 S!
b0 R!
b0 M!
b10 L!
b1 K!
1D!
b11110 %
1!
0"
0#
0$
bx &
1'
0(
b11111 )
b111 *
1+
b0 ,
b0 -
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
b0 N
b10100010011 O
b11111111111111111111111111111111 P
b11111 Q
b11111 R
b11111 S
b0 T
b0 U
b0 V
b0 W
b100 X
b0 Y
b0 Z
0[
b10100010011 \
b0 ]
b0 ^
b0 _
z`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
b0 k
b0 l
b0 m
b0 n
0o
0p
1q
bz r
b0 s
0t
b0 u
b0 v
b0 w
b0 x
0y
0z
0{
b0 |
0}
b0 ~
0!!
0"!
0#!
b0 $!
b0 %!
b0 &!
b0 '!
0(!
b0 )!
b0 *!
b0 +!
0,!
0-!
0.!
b0 /!
b0 0!
b0 1!
b0 2!
b0 3!
b0 4!
b0 5!
b0 6!
b0 7!
08!
09!
0:!
0;!
0<!
0=!
0>!
0?!
0@!
0A!
b100 B!
b0 C!
b0 E!
b100 F!
b100 G!
b100 H!
bx I!
bx J!
1N!
0O!
b0 P!
b0 Q!
b0 X!
b0 Y!
b0 Z!
b0 [!
b10100010011 ]!
b1000000100110111 _!
b101000000000010110010011 a!
b11000010011 c!
b100000000011010010011 e!
b1000000000000000011101111 g!
b10110010011 i!
b10100010011 k!
b1110011 m!
b1011001010001100011 o!
b11111111111111111111111111111111 p!
b0 q!
0r!
0s!
0t!
b0 u!
b0 v!
b0 w!
b0 x!
b0 y!
b0 z!
b0 {!
b0 |!
b0 }!
b0 ~!
b0 !"
b0 ""
b0 #"
b0 $"
b0 %"
b0 &"
b0 '"
b0 ("
b0 )"
b0 *"
b0 +"
b0 ,"
b0 -"
b0 ."
b0 /"
b0 0"
b0 1"
b0 2"
b0 3"
b0 4"
b0 5"
b0 6"
07"
18"
b100000 9"
b0 ;"
b0 ="
b0 ?"
b0 A"
b0 C"
b0 E"
b0 G"
b0 I"
b0 K"
b0 M"
b0 O"
b0 Q"
b0 S"
b0 U"
b0 W"
b0 Y"
b0 ["
b0 ]"
b0 _"
b0 a"
b0 c"
b0 e"
b0 g"
b0 i"
b0 k"
b0 m"
b0 o"
b0 q"
b0 s"
b0 u"
b0 w"
b0 x"
b0 y"
0z"
0{"
0|"
b0 }"
b0 ~"
b0 !#
b0 "#
b0 ##
b0 $#
b0 %#
0&#
0'#
0(#
0)#
b0 *#
b0 +#
0,#
b0 -#
0.#
0/#
00#
b0 1#
b0 2#
b0 3#
04#
b0 5#
b0 6#
b0 7#
b0 8#
b0 9#
0:#
0;#
0<#
0=#
b0 >#
0?#
b0 @#
0A#
0B#
0C#
b0 D#
b0 E#
b10100010011 G#
b1000000100110111 I#
b101000000000010110010011 K#
b11000010011 M#
b100000000011010010011 O#
b1000000000000000011101111 Q#
b10110010011 S#
b10100010011 U#
b1110011 W#
b1011001010001100011 Y#
b0 Z#
b0 [#
b0 \#
0]#
0^#
0_#
b0 `#
b0 a#
0b#
0c#
0d#
0e#
0f#
0g#
b0 h#
b0 i#
$end
#5
1"
1(
#15
0!
0'
b10100010011 Z#
b11111 }"
b11111 ~"
b11111 !#
b11111 *#
b111 +#
1,#
b10100010011 p!
b100 X!
b100 W
b10100010011 P
1}
b111 3!
b11111 |
b11111 )!
b11111 w
b11111 v
b10100010011 %!
b10011 a#
b10011 V
0+
b0 R
b0 Q
b0 *
b1010 S
b100 )
b100 Z!
b100 E!
b1000 F!
1z"
b1000 G!
b1000000100110111 O
1[
b1000 B!
b1000 H!
b1000 X
#30
1!
1'
#45
0!
0'
b11111 8#
b111 D#
b0 }"
b0 ~"
b1010 !#
b100 *#
b0 +#
0,#
10#
b1000000100110111 p!
b100 q!
b1000 X!
b1000 W
b100 &!
b1000000100110111 P
1;!
0}
b0 3!
b100 |
b1010 )!
b0 w
b0 v
b111 4!
b11111 *!
b1000000000000000 x"
b1 Q
b10 S
b1101 )
b1000000000000000 N
b1000 Z!
b1000 E!
b1100 F!
b1100 G!
b101000000000010110010011 O
b1100 B!
b1100 H!
b1100 X
#60
1!
1'
#75
0!
0'
b11111 \#
b111 `#
b1010 8#
1C#
b0 D#
b1 }"
b10 !#
b1000000000000000 $#
b100 %#
b1101 *#
b101000000000010110010011 p!
b1000 q!
b1100 X!
b1100 W
b1000 &!
b101000000000010110010011 P
b1101 |
b100 '!
b1000000000000000 x
b10 )!
b1 v
b0 4!
1<!
b1010 *!
b111 5!
b11111 +!
b1010 x"
b0 a#
b0 V
b1000000000000000 -
b100 T
b1010 R
b0 Q
b1011 S
b100 )
b1010 N
b1100 Z!
b1100 E!
b10000 F!
b1000000000000000 3#
b10000 G!
b11000010011 O
1>
b10000 B!
b10000 H!
b10000 X
#90
1!
1'
#105
0!
0'
b1010 \#
1_#
b0 `#
b1000000000000000 6#
b10 8#
b0 }"
b1010 ~"
b1011 !#
b1010 $#
b1000 %#
b100 *#
b11000010011 p!
b1100 q!
b10000 X!
b10000 W
b1100 &!
b11000010011 P
b100 |
b1000 '!
b1010 x
b1011 )!
b1010 w
b0 v
b10 *!
b1000000000000000 1!
b0 5!
1=!
b1010 +!
b0 x"
b10 i#
b10011 a#
b10011 V
b1000000000000000 E#
b10 l
b1010 -
b1000 T
b0 R
b1100 S
b0 N
b10000 Z!
b10000 E!
b10100 F!
b1010 3#
b10100 G!
b100000000011010010011 O
0>
1J
1L
bx \
b10100 B!
b10100 H!
b10100 X
#120
1!
1'
#135
0!
0'
bx Z#
b1000000000000000 [#
b10 \#
b1010 6#
b1011 8#
b0 ~"
b1100 !#
b0 $#
b1100 %#
b100000000011010010011 p!
b10000 q!
b10100 X!
b10100 W
b10000 &!
b100000000011010010011 P
b1100 '!
b0 x
b1100 )!
b0 w
b1011 *!
b1010 1!
b10 +!
b1000000000000000 2!
bx %!
b1 x"
b0 i#
bx a#
bx V
b1000000000000000 _
b1010 E#
b0 l
b0 -
b1100 T
b1 R
b1101 S
b1 N
b10100 Z!
b10100 E!
b11000 F!
b0 3#
b11000 G!
b1000000000000000011101111 O
0J
0L
b110000100110000000010100000 \
b11000 B!
b10000 C!
b100100 E!
b10100 G!
b11000 H!
b11000 X
b10100 B!
b10100 H!
b10100 X
b100100 G!
b100100 B!
b100100 H!
b100100 X
#150
1!
1'
#165
0!
0'
b1000000000000000 w!
b110000100110000000010100000 Z#
b1010 [#
b1011 \#
b0 6#
b1100 8#
b1 ~"
b1101 !#
b1 $#
b10000 %#
b1000000000000000011101111 p!
b10100 q!
b100100 X!
b1000000000000000 ?"
b100100 W
b10100 &!
b1000000000000000011101111 P
b10000 '!
b1 x
b1101 )!
b1 w
b1100 *!
b0 1!
b1011 +!
b1010 2!
b110000100110000000010100000 %!
b10000 x"
b11111111111111111111111110100000 a#
b11111111111111111111111110100000 V
b1010 _
b0 E#
b1 -
b10000 T
b10000 R
b1 S
b11011 )
b10000 N
b100100 Z!
b110100 E!
b101000 F!
b1 3#
1{"
b110100 G!
b1011001010001100011 O
1b
1M
b10100010011 \
b110100 B!
b1000 C!
b101100 E!
b101000 G!
b110100 H!
b110100 X
b101000 B!
b101000 H!
b101000 X
#180
1!
1'
#195
0!
0'
b1010 ""
b10100010011 Z#
b0 [#
b1100 \#
b1 6#
b1101 8#
b10000 ~"
b1 !#
b10000 $#
b10100 %#
1'#
b11011 *#
b1011001010001100011 p!
b100100 q!
b101000 X!
b1010 Q"
08"
b101000 W
b100100 &!
b1011001010001100011 P
b11011 |
1y
b10100 '!
b10000 x
b1 )!
b10000 w
b1101 *!
b1 1!
b1100 +!
b0 2!
b10100010011 %!
b1000 x"
b100000 5#
b100 3#
b10011 a#
b10011 V
b0 _
b1 E#
b10000 -
b10100 T
b10100 ,
1K
0M
b100000 U
b0 R
b1011 Q
b1 *
b1000 S
b11000 )
b1000 N
b101000 Z!
b110000 E!
b101100 F!
b11000 3#
b100100 5#
0z"
0{"
1|"
b101100 G!
b1000000001100111 O
1c
0b
0[
b1010 ]
b100100 U
1I
1J
0K
b110111000000000000000000000101 \
b101100 B!
b0 C!
b101000 E!
b101100 H!
b101100 X
#210
1!
1'
#225
0!
0'
b110111000000000000000000000101 Z#
b1 [#
b1101 \#
b11000 6#
b1 8#
b100100 9#
b1011 }"
b0 ~"
b1000 !#
b1010 "#
b1000 $#
b100100 %#
0'#
1(#
b11000 *#
b1 +#
00#
b1000000001100111 p!
b101000 q!
b101100 X!
b101100 W
b101000 &!
b1000000001100111 P
0;!
b1 3!
b11000 |
1z
0y
b100100 '!
b1000 x
b1010 u
b1000 )!
b0 w
b1011 v
b100100 ~
b1 *!
b11000 1!
b1101 +!
b1 2!
b110111000000000000000000000101 %!
b0 x"
b1 3#
b11100 5#
b1010 1#
b101 a#
b101 V
b1 _
b11000 E#
b1010 m
b100100 T
b0 ,
b0 -
1o
b11100 U
0I
0J
1M
b1 Q
b0 *
b0 S
b11001 )
b0 N
b101100 Z!
b101100 E!
b110000 F!
b10 s
b101100 5#
b0 3#
14#
1z"
1{"
0|"
b110000 G!
b110001010010000000100011 O
1a
0c
1b
1[
b0 ]
1A!
0M
b101100 U
b1010 ,
b10110010011 \
b110000 B!
04#
b1 3#
1M
0A!
b110000 H!
b110000 X
14#
1A!
#240
1!
1'
#255
0!
0'
b1 $"
b10110010011 Z#
b11000 [#
b1 \#
b1 6#
b1000 8#
b101100 9#
1:#
1;#
b10 >#
0C#
b1 D#
b1 }"
b0 !#
b0 "#
b0 $#
b101000 %#
1'#
0(#
1)#
b11001 *#
b0 +#
10#
b110001010010000000100011 p!
b101100 q!
b110000 X!
b1 U"
b110000 W
b101100 &!
b110001010010000000100011 P
1;!
b0 3!
b11001 |
1{
0z
1y
b101000 '!
b0 x
b0 u
b0 )!
b1 v
b1 4!
0<!
b10 $!
1#!
1!!
b101100 ~
b1000 *!
b1 1!
b1 +!
b11000 2!
b10110010011 %!
b1110 3#
b100100 5#
b0 1#
b10 h#
b1 Q!
0N!
b11111111111111111111111110010011 a#
b11111111111111111111111110010011 V
b11000 _
b1 E#
0q
b10 k
b0 m
b101000 ,
b1010 T
1p
0o
b100100 U
1J
1K
1L
0M
b1100 R
b1010 Q
b10 *
b1000 )
b110000 Z!
b110000 E!
b110100 F!
b1 s
b11000 1#
1b#
1c#
1d#
b101100 3#
b1010 5#
04#
b1111 y"
0z"
0{"
b110100 G!
b1100000000110010011 O
0a
0b
0[
b1111 Z
0A!
b1010 U
1H
0L
b0 T
bx H!
1j
1i
1h
b110111000000000000000000000101 \
b11000 m
bx B!
b0 5#
b11000 T
b0 U
bx X
b11000 5#
b11000 U
#270
1!
1'
#285
0!
0'
b11000 v!
b110111000000000000000000000101 Z#
b1 [#
b1000 \#
0_#
b1 `#
b101100 6#
b0 8#
b11000 9#
0:#
0;#
b0 >#
b0 D#
b1010 }"
b1100 ~"
b101100 %#
0'#
0)#
b1 *#
00#
b11111111111111111111111111111111 p!
b0 q!
bx X!
b1 P!
b10 Q!
b11000 ="
bx W
b0 &!
b11111111111111111111111111111111 P
0;!
b1 |
0{
0y
b101100 '!
b1100 w
b1010 v
b0 4!
b0 $!
0#!
0!!
b11000 ~
b0 *!
b101100 1!
b1 5!
0=!
b1000 +!
b1 2!
b110111000000000000000000000101 %!
b0 5#
b0 3#
b0 h#
b110100 B!
b1 Q!
1N!
b101 a#
b1 _
b101 V
b101100 E#
1q
b110100 X
b0 k
b11000 ,
b101100 T
0H
0J
0K
0p
b0 U
1+
b11111 R
b11111 Q
b111 *
b11111 S
b11111 )
bx Z!
bx E!
bx F!
b0 s
b0 1#
0b#
0c#
0d#
b0 y"
bx G!
bx O
b0 Z
b110100 H!
0j
0i
0h
b110001010010000000100011 \
b0 m
bx B!
b0 ,
bx H!
bx X
#300
1!
1'
#315
0!
0'
b110001010010000000100011 Z#
b101100 [#
b0 \#
b0 `#
b0 6#
b0 9#
b11111 }"
b11111 ~"
b11111 !#
b0 %#
b11111 *#
b111 +#
1,#
bx p!
bx q!
bx &!
bx P
1}
b111 3!
b11111 |
b0 '!
b11111 )!
b11111 w
b11111 v
b0 ~
b0 1!
b0 5!
b0 +!
b101100 2!
b110001010010000000100011 %!
b100011 a#
b101100 _
b100011 V
b0 E#
b0 T
x+
bx R
bx Q
bx *
bx S
bx )
xd
xa
xe
bx ]
bx ^
b10100010011 \
#330
1!
1'
#345
0!
0'
b10100010011 Z#
b0 [#
b11111 8#
b111 D#
bx }"
bx ~"
bx !#
bx "#
bx ##
bx %#
x)#
bx *#
bx +#
x,#
x.#
x/#
x8!
x,!
x}
bx 3!
bx |
x{
bx '!
bx /!
bx u
bx )!
bx w
bx v
b111 4!
b11111 *!
b0 2!
b10100010011 %!
bx 2#
bx 1#
b10011 a#
b10011 V
b0 _
bx m
bx n
bx T
xp
xo
bx s
bx ,
#360
1!
1'
#375
0!
0'
b11111 \#
b111 `#
bx 7#
bx 8#
x?#
x<#
x;#
bx >#
xA#
xB#
bx D#
bx 4!
x9!
x-!
bx $!
x#!
x"!
x(!
bx *!
bx 0!
b111 5!
b11111 +!
b0x Q!
xb#
xc#
xd#
b0 a#
b0 V
xj
xi
xh
#390
1!
1'
#405
0!
0'
bx \#
x]#
x^#
bx `#
b0x P!
bx Q!
xO!
xt
bx 5!
x:!
x.!
bx +!
#420
1!
1'
#435
0!
0'
xr!
bx P!
x>!
#450
1!
1'
#465
0!
0'
x&#
x?!
#480
1!
1'
#495
0!
0'
x=#
x@!
#510
1!
1'
#525
0!
0'
#540
1!
1'
#555
0!
0'
#570
1!
1'
#585
0!
0'
#600
1!
1'
#615
0!
0'
#630
1!
1'
#645
0!
0'
#660
1!
1'
#675
0!
0'
#690
1!
1'
#705
0!
0'
#720
1!
1'
#735
0!
0'
#750
1!
1'
#765
0!
0'
#780
1!
1'
#795
0!
0'
#810
1!
1'
#825
0!
0'
#840
1!
1'
#855
0!
0'
#870
1!
1'
#885
0!
0'
#900
1!
1'
#915
0!
0'
#930
1!
1'
#945
0!
0'
#960
1!
1'
#975
0!
0'
#990
1!
1'
#1005
0!
0'
#1020
1!
1'
#1035
0!
0'
#1050
1!
1'
#1065
0!
0'
#1080
1!
1'
#1095
0!
0'
#1110
1!
1'
#1125
0!
0'
#1140
1!
1'
#1155
0!
0'
#1170
1!
1'
#1185
0!
0'
#1200
1!
1'
#1215
0!
0'
#1230
1!
1'
#1245
0!
0'
#1260
1!
1'
#1275
0!
0'
#1290
1!
1'
#1305
0!
0'
#1320
1!
1'
#1335
0!
0'
#1350
1!
1'
#1365
0!
0'
#1380
1!
1'
#1395
0!
0'
#1410
1!
1'
#1425
0!
0'
#1440
1!
1'
#1455
0!
0'
#1470
1!
1'
#1485
0!
0'
#1500
1!
1'
#1515
0!
0'
#1530
1!
1'
#1545
0!
0'
#1560
1!
1'
#1575
0!
0'
#1590
1!
1'
#1605
0!
0'
#1620
1!
1'
#1635
0!
0'
#1650
1!
1'
#1665
0!
0'
#1680
1!
1'
#1695
0!
0'
#1710
1!
1'
#1725
0!
0'
#1740
1!
1'
#1755
0!
0'
#1770
1!
1'
#1785
0!
0'
#1800
1!
1'
#1815
0!
0'
#1830
1!
1'
#1845
0!
0'
#1860
1!
1'
#1875
0!
0'
#1890
1!
1'
#1905
0!
0'
#1920
1!
1'
#1935
0!
0'
#1950
1!
1'
#1965
0!
0'
#1980
1!
1'
#1995
0!
0'
#2010
1!
1'
#2025
0!
0'
#2040
1!
1'
#2055
0!
0'
#2070
1!
1'
#2085
0!
0'
#2100
1!
1'
#2115
0!
0'
#2130
1!
1'
#2145
0!
0'
#2160
1!
1'
#2175
0!
0'
#2190
1!
1'
#2205
0!
0'
#2220
1!
1'
#2235
0!
0'
#2250
1!
1'
#2265
0!
0'
#2280
1!
1'
#2295
0!
0'
#2310
1!
1'
#2325
0!
0'
#2340
1!
1'
#2355
0!
0'
#2370
1!
1'
#2385
0!
0'
#2400
1!
1'
#2415
0!
0'
#2430
1!
1'
#2445
0!
0'
#2460
1!
1'
#2475
0!
0'
#2490
1!
1'
#2505
0!
0'
#2520
1!
1'
#2535
0!
0'
#2550
1!
1'
#2565
0!
0'
#2580
1!
1'
#2595
0!
0'
#2610
1!
1'
#2625
0!
0'
#2640
1!
1'
#2655
0!
0'
#2670
1!
1'
#2685
0!
0'
#2700
1!
1'
#2715
0!
0'
#2730
1!
1'
#2745
0!
0'
#2760
1!
1'
#2775
0!
0'
#2790
1!
1'
#2805
0!
0'
#2820
1!
1'
#2835
0!
0'
#2850
1!
1'
#2865
0!
0'
#2880
1!
1'
#2895
0!
0'
#2910
1!
1'
#2925
0!
0'
#2940
1!
1'
#2955
0!
0'
#2970
1!
1'
#2985
0!
0'
#3000
1!
1'
#3005
